#Jet Fighter
import turtle
from turtle import *
import math
from math import tan
import re
from threading import Timer

# Functions

#this function uses the turtle.listen() function and tells the
#game what to do when a button is pressed. It also moves the planes forward
def movement():
    global pp1,pp2
    pp1 = p1; pp2 = p2
    jet.forward(FORWARD_SPEED)
    fighter.forward(FORWARD_SPEED)
    ata_jet_follow()
    aj = ata_jet_seek()
    ata_jet_borders(aj)
    ata_fighter_follow()
    af = ata_fighter_seek()
    ata_fighter_borders(af)

    turtle.onkey(jet_left,"Left")
    turtle.onkey(jet_right,"Right")
    turtle.onkey(jet_forward,"Up")
    turtle.onkey(jet_shoot,"Down")
    jet_bullet_moving()
    turtle.onkey(ataj_activator,"/")
    
    turtle.onkey(fighter_left,"a")
    turtle.onkey(fighter_right,"d")
    turtle.onkey(fighter_forward,"w")
    turtle.onkey(fighter_shoot,"s")
    fighter_bullet_moving()
    turtle.onkey(ataf_activator,"e")
    
    turtle.onkey(pause, "space")
    turtle.onkey(Quit, "Q")
    
    borders_of_jet()
    borders_of_fighter()

    

#this function occurs when the left arrow key is pressed.
#it takes no parameters but uses two global variables, jet turning
#angle and ltd. It subtracts frum the jet turning angle
def jet_left():
    global jetturningangle, jltd, jrtd
    jltd = jltd+1
    if jltd == 1 and jetturningangle == 0:

        jetturningangle = 11
    if jetturningangle == 0:
        jetturningangle = 11
    else:
        jetturningangle = jetturningangle-1
        
    jet.left(HEADING_STEP)
    turtle.addshape(name=jetturn[jetturningangle], shape=None) 
    jet.shape(jetturn[jetturningangle])
    jrtd = jrtd+1


#This functions occurs when the right arrow key is pressed. It has
#no parameters but uses the global variable jet turning angle
#It adds to jet turning angle and turns the plane right 30 degrees
def jet_right():
    global jetturningangle, jrtd, jltd
    jrtd = jrtd+1
    if jetturningangle == 0 and jrtd == 1:
        jetturningangle = 0
    if jetturningangle <= 11 and jrtd !=1:
        jetturningangle = jetturningangle+1
    if jetturningangle == 12:
        jetturningangle = 0
    jet.right(HEADING_STEP)
    turtle.addshape(name=jetturn[jetturningangle], shape=None) 
    jet.shape(jetturn[jetturningangle])
    jltd = jltd +1

#this function serves as a kind of boost when the up arrow key is pressed.
#it moves the jet forward 1.5 times the forward speed
def jet_forward():
    jet.forward(1.5*FORWARD_SPEED)

def jet_shoot():
    if len(jbullets)<5:
        jbullets.append([Turtle(),False])
        last_turtle = jbullets[len(jbullets)-1][0]
        last_turtle.setheading(jet.heading())
        last_turtle.pu()
        last_turtle.shape('circle')
        last_turtle.color('red')
        last_turtle.shapesize(.1,.1,.1)
        last_turtle.goto(jet.xcor(),jet.ycor())
    elif len(jbullets)>=5:
        first_elem = jbullets[0]
        first_turtle = first_elem[0]
        out_o_b = first_elem[1]
        if (out_o_b):
            first_turtle.goto(jet.xcor(),jet.ycor())
            first_turtle.setheading(jet.heading())
            jbullets.remove(first_elem)
            jbullets.append([first_elem[0],False])

def jet_bullet_moving():
    for turt in jbullets:
        turt[0].pu()
        out_of_bounds_x = False
        out_of_bounds_y = False
        if turt[0].xcor()> 600 or turt[0].xcor()< -600:
            turt[0].goto(650,0)
            mover = 0
            out_of_bounds_x = True
        elif turt[0].ycor()> 600 or turt[0].ycor()< -600:
            turt[0].goto(650,0)
            mover = 0
            out_of_bounds_y = True
        elif red_bullet_collision(turt):
            turt[0].goto(650,0)
            mover = 0
            out_of_bounds_x = True
        else:
            mover = 2
        if (out_of_bounds_x or out_of_bounds_y) or (turt[1]==True):
            turt.remove(turt[1])
            turt.append(True)
        else:
            turt.remove(turt[1])
            turt.append(False)
        turt[0].forward(FORWARD_SPEED*mover)

def fighter_right():
    global fighterturningangle, frtd, fltd
    frtd = frtd+1
    if frtd == 1 and fighterturningangle == 0:
        fighterturningangle = 11
    if fighterturningangle == 0:
        fighterturningangle = 11
    else:
        fighterturningangle = fighterturningangle-1
        
    fighter.right(HEADING_STEP)
    turtle.addshape(name=fighterturn[fighterturningangle], shape=None) 
    fighter.shape(fighterturn[fighterturningangle])
    fltd = fltd+1

def fighter_left():
    global fighterturningangle, fltd, frtd
    fltd = fltd+1
    if fighterturningangle == 0 and fltd == 1:
        fighterturningangle = 0
    if fighterturningangle <= 11 and fltd != 1:
        fighterturningangle = fighterturningangle+1
    if fighterturningangle == 12:
        fighterturningangle = 0
    fighter.left(HEADING_STEP)
    turtle.addshape(name=fighterturn[fighterturningangle], shape=None) 
    fighter.shape(fighterturn[fighterturningangle])
    frtd = frtd+1
    
def fighter_forward():
    fighter.forward(1.5*FORWARD_SPEED)

def fighter_shoot():
    if len(fbullets)<5:
        fbullets.append([Turtle(),False])
        last_turtle = fbullets[len(fbullets)-1][0]
        last_turtle.setheading(fighter.heading())
        last_turtle.pu()
        last_turtle.shape('circle')
        last_turtle.shapesize(.1,.1,.1)
        last_turtle.goto(fighter.xcor(),fighter.ycor())
    elif len(fbullets)>=5:
        first_elem = fbullets[0]
        first_turtle = first_elem[0]
        out_o_b = first_elem[1]
        if (out_o_b):
            first_turtle.goto(fighter.xcor(),fighter.ycor())
            first_turtle.setheading(fighter.heading())
            fbullets.remove(first_elem)
            fbullets.append([first_elem[0],False])

def fighter_bullet_moving():
    for turt in fbullets:
        turt[0].pu()
        out_of_bounds_x = False
        out_of_bounds_y = False
        if turt[0].xcor()> 600 or turt[0].xcor()< -600:
            turt[0].goto(650,0)
            mover = 0
            out_of_bounds_x = True
        elif turt[0].ycor()> 600 or turt[0].ycor()< -600:
            turt[0].goto(650,0)
            mover = 0
            out_of_bounds_y = True
        elif black_bullet_collision(turt):
            turt[0].goto(650,0)
            mover = 0
            out_of_bounds_x = True
        else:
            mover = 2
        if (out_of_bounds_x or out_of_bounds_y) or (turt[1]==True):
            turt.remove(turt[1])
            turt.append(True)
        else:
            turt.remove(turt[1])
            turt.append(False)
        turt[0].forward(FORWARD_SPEED*mover)

def borders_of_jet():
    jx = jet.xcor()
    jy = jet.ycor()
    
    if (jx>RIGHT_EDGE):
        jet.setx(-1*jx+5)
        
    if (jx<LEFT_EDGE):
        jet.setx(-1*jx-5)
        
    if (jy>TOP_EDGE):
        jet.sety(-1*jy+5)
        
    if (jy<BOTTOM_EDGE):
        jet.sety(-1*jy-5)

def borders_of_fighter():
    fx = fighter.xcor()
    fy = fighter.ycor()
    
    if (fx>RIGHT_EDGE):
        fighter.setx(-1*fx+5)
        
    if (fx<LEFT_EDGE):
        fighter.setx(-1*fx-5)
        
    if (fy>TOP_EDGE):
        fighter.sety(-1*fy+5)
        
    if (fy<BOTTOM_EDGE):
        fighter.sety(-1*fy-5)
        
def first_time_scoreboard():
    score.clear()
    jet_prompt = p_names[0]
    fighter_prompt = p_names[1]
    score_prompt = jet_prompt + ": " +str(p1) + "      " + fighter_prompt + ": " + str(p2)
    score.write (score_prompt, align="center", font=("Roboto", 30, "bold"))
    winning()

def health_display(pp1,pp2):
    global p1, p2
    if pp1!=p1 or pp2!=p2:
        score.clear()
        jet_prompt = p_names[0]
        fighter_prompt = p_names[1]
        score_prompt = jet_prompt + ": " + str(p1) + "      " + fighter_prompt + ": " + str(p2)
        score.write (score_prompt, align="center", font=("Roboto", 30, "bold"))
        winning()
        
def winning():
    global p1, p2, paused
    fx = fighter.xcor()
    fy = fighter.ycor()
    jx = jet.xcor()
    jy = jet.ycor()

    if p1 <= 0:
        jet.shape('explosion.gif')
        ata_jet.shape('explosion.gif')
        ata_fighter.clear()
        paused = True
        score.clear()
        
        if jy > 0:
            score.goto(0,-250)
            score.write(p_names[1]+" Wins!", align="center", font=("Courier", 100, "bold"))
        if jy <= 0:
            score.goto(0,200)
            score.write(p_names[1]+" Wins!", align="center", font=("Courier", 100, "bold"))
        

    if p2 <= 0:
        fighter.shape('explosion.gif')
        ata_fighter.shape('explosion.gif')
        ata_jet.clear()
        paused = True
        score.clear()
        
        if fy > 0:
            score.goto(0,-250)
            score.write(p_names[0]+" Wins!", align="center", font=("Courier", 100, "bold"))
        if fy <= 0:
            score.goto(0,200)
            score.write(p_names[0]+" Wins!", align="center", font=("Courier", 100, "bold"))
def pause():
   global paused
   if (paused == True):
      paused = False
   elif (paused == False):
      paused = True
def Quit():
    paused = True
    q = screen.textinput("Quit", "Are you sure you want to quit?(yes or no)")
    if re.match("^[y, Y]", q):
        turtle.bye()
    else:
        paused = False

def ataj_activator():
    global ataj_active, jet_ata_cooldown, jcooldown_happened, jtimer_active
    if jtimer_active == False:
        if jet_ata_cooldown == True:
            ata_jet.hideturtle()
            t = Timer(3, ataj_cooldown)
            t.start()
            ataj_active = False
            jtimer_active = True
            
        if jet_ata_cooldown == False:
            ataj_active = True
            
        if jcooldown_happened == True:
            Timer(3, ataj_cooldown).cancel()
            jcooldown_happened = False
            jet_ata_cooldown = False
            jtimer_active = False
    else:
        return
        
def ataj_cooldown():
    global jcooldown_happened, jtimer_active, jet_ata_cooldown
    ata_jet.showturtle()
    jcooldown_happened = True
    jtimer_active = False
    jet_ata_cooldown = False

def ata_jet_follow():
    global ataj_active
    if (ataj_active==False):
        ata_jet.pu()
        ata_jet.goto(jet.xcor(),jet.ycor())
        ata_jet.setheading(jet.heading())

def ata_jet_seek():
    global ataj_active, p1, jet_ata_cooldown
    if ataj_active:
        ata_jet.pd()
        ataj_xdist = ata_jet.xcor()-fighter.xcor()+.0000000000000000001
        ataj_ydist = ata_jet.ycor()-fighter.ycor()+.0000000000000000001
        ataj_rel_ang = math.degrees(tan(ataj_ydist/ataj_xdist))
        if (ata_jet.xcor()>fighter.xcor() and ata_jet.ycor()>fighter.ycor()):
            ataj_rel_ang-=180
        if (ata_jet.xcor()>fighter.xcor() and ata_jet.ycor()<fighter.ycor()):
            ataj_rel_ang-=90
        ata_jet.setheading(ataj_rel_ang)
        ata_jet.forward(FORWARD_SPEED*1.7)
        if abs(ata_jet.xcor() - fighter.xcor())<10 and abs(ata_jet.ycor() - fighter.ycor()) <10:
             ataj_active = False   
             ata_jet.clear()
             global p2
             p2-=15
             ata_jet_follow()
             jet_ata_cooldown = True
             ataj_activator()
        return (ataj_rel_ang)

def ata_jet_borders(aj):
    global ataj_active
    ax = ata_jet.xcor()
    ay = ata_jet.ycor()
    if ataj_active:
        ataj_rel_angle = int(aj)
        turn_angle = ataj_rel_angle + 180
        if (ax>RIGHT_EDGE): 
            ata_jet.setheading(turn_angle)
            ata_jet.forward(30)
            
        if (ax<LEFT_EDGE):    
            ata_jet.setheading(turn_angle)
            ata_jet.forward(30)
            
        if (ay>TOP_EDGE): 
            ata_jet.setheading(turn_angle)
            ata_jet.forward(30)
          
        if (ay<BOTTOM_EDGE): 
            ata_jet.setheading(turn_angle)
            ata_jet.forward(30)

def ataf_activator():
    global ataf_active, fighter_ata_cooldown, fcooldown_happened, ftimer_active
    if ftimer_active == False:
        if fighter_ata_cooldown == True:
            ata_fighter.hideturtle()
            t = Timer(3, ataf_cooldown)
            t.start()
            ataf_active = False
            ftimer_active = True
            
        if fighter_ata_cooldown == False:
            ataf_active = True
            
        if fcooldown_happened == True:
            Timer(3, ataf_cooldown).cancel()
            fcooldown_happened = False
            fighter_ata_cooldown = False
            ftimer_active = False
    else:
        return
        
def ataf_cooldown():
    global fcooldown_happened, ftimer_active, fighter_ata_cooldown
    ata_fighter.showturtle()
    fcooldown_happened = True
    ftimer_active = False
    fighter_ata_cooldown = False

def ata_fighter_follow():
    global ataf_active
    if (ataf_active==False):
        ata_fighter.pu()
        ata_fighter.goto(fighter.xcor(),fighter.ycor())
        ata_fighter.setheading(fighter.heading())
        
def ata_fighter_seek():
    global ataf_active, p2, fighter_ata_cooldown
    if ataf_active:
        ata_fighter.pd()
        ataf_xdist = ata_fighter.xcor()-jet.xcor()+.0000000000000000001
        ataf_ydist = ata_fighter.ycor()-jet.ycor()+.0000000000000000001
        ataf_rel_ang = math.degrees(tan(ataf_ydist/ataf_xdist))
        if (ata_fighter.xcor()>jet.xcor() and ata_fighter.ycor()>jet.ycor()):
            ataf_rel_ang-=180
        if (ata_fighter.xcor()>jet.xcor() and ata_fighter.ycor()<jet.ycor()):
            ataf_rel_ang-=90
        ata_fighter.setheading(ataf_rel_ang)
        ata_fighter.forward(FORWARD_SPEED*1.7)
        if abs(ata_fighter.xcor() - jet.xcor())<10 and abs(ata_fighter.ycor() - jet.ycor()) <10:
             ataf_active = False   
             ata_fighter.clear()
             global p1
             p1-=15
             ata_fighter_follow()
             fighter_ata_cooldown = True
             ataf_activator()
        return (ataf_rel_ang)
    
def ata_fighter_borders(af):
    global ataf_active
    ax = ata_fighter.xcor()
    ay = ata_fighter.ycor()
    if ataf_active:
        ataf_rel_angle = int(af)
        turn_angle = ataf_rel_angle + 180
        if (ax>RIGHT_EDGE): 
            ata_fighter.setheading(turn_angle)
            ata_fighter.forward(30)
            
        if (ax<LEFT_EDGE):    
            ata_fighter.setheading(turn_angle)
            ata_fighter.forward(30)
            
        if (ay>TOP_EDGE): 
            ata_fighter.setheading(turn_angle)
            ata_fighter.forward(30)
          
        if (ay<BOTTOM_EDGE): 
            ata_fighter.setheading(turn_angle)
            ata_fighter.forward(30)
            
def red_bullet_collision(turt):
    if abs(turt[0].xcor() - fighter.xcor())<12 and abs(turt[0].ycor() - fighter.ycor()) <12:
        collision = True
        global p2
        p2-=5
    else:
        collision = False
    return collision

def black_bullet_collision(turt):
    if abs(turt[0].xcor() - jet.xcor())<12 and abs(turt[0].ycor() - jet.ycor()) <12:
        collision = True
        global p1
        p1-=5
    else:
        collision = False
    return collision

def choose_names():
    p1_name = screen.textinput("Player 1", "What is Player 1's name?(black jet)")
    p_names.append(p1_name)
    p2_name = screen.textinput("Player 2", "What is Player 2's name?(red jet)")
    p_names.append(p2_name)

# Constants
RIGHT_EDGE= 400
LEFT_EDGE = -400
BOTTOM_EDGE = -400
TOP_EDGE = 400
HEADING_STEP = 30
FORWARD_SPEED = 6


# Global Variables
jetturningangle = 0
jltd = 0
jrtd = 0
ataj_active = False

p1 = 100
p2 = 100

fighterturningangle = 0
fltd = 0
frtd = 0
ataf_active = False

jet_ata_cooldown = False
fighter_ata_cooldown = False

fcooldown_happened = False
jcooldown_happened = False

ftimer_active = False
jtimer_active = False

#scoreboard
score=turtle.Turtle()
score.speed(0)
score.penup()
score.hideturtle()
score.goto (0,300)

jet_cooldown = Turtle()
jet_cooldown.speed(0)
jet_cooldown.pu()
jet_cooldown.hideturtle()
jet_cooldown.goto(-300, 305)
jet_cooldown.color("black")

fighter_cooldown = Turtle()
fighter_cooldown.speed(0)
fighter_cooldown.pu()
fighter_cooldown.hideturtle()
fighter_cooldown.color("red")
fighter_cooldown.goto(300, 305)

#lists
jetturn = ["Jet30.gif", "Jet60.gif", "Jet90.gif", "Jet120.gif", "Jet150.gif", "Jet180.gif", "Jet210.gif", "Jet240.gif", "Jet270.gif", "Jet300.gif", "Jet330.gif", "Jet0.gif"]
fighterturn = ["Fighter330.gif", "Fighter300.gif", "Fighter270.gif", "Fighter240.gif", "Fighter210.gif","Fighter180.gif","Fighter150.gif", "Fighter120.gif", "Fighter90.gif", "Fighter60.gif", "Fighter30.gif","Fighter0.gif"]
jbullets = []
fbullets = []
p_names = []

# Screen
screen = Screen()
screen.setup(800,800)
screen.title("Jet Fighter")
screen.bgcolor("skyblue")
turtle.bgpic(picname="Sky.gif")
screen.tracer(0)
turtle.addshape(name="explosion.gif", shape=None)

# Turtles
jet = Turtle()
turtle.addshape(name="Jet0.gif", shape=None) 
jet.shape("Jet0.gif") 
jet.penup()
jet.setx(100)

fighter = Turtle()
turtle.addshape(name="Fighter0.gif", shape=None)
fighter.shape("Fighter0.gif")
fighter.penup()
fighter.setx(-100)
fighter.left(180)

ata_jet = Turtle()
ata_jet.color('red')
ata_jet.pu()
ata_jet.goto(jet.xcor(),jet.ycor())

ata_fighter = Turtle()
ata_fighter.color('black')
ata_fighter.pu()
ata_fighter.goto(fighter.xcor(),fighter.ycor())

paused = False

choose_names()
first_time_scoreboard()
# Game Loop
while(True):
    screen.update()
    turtle.listen()
    if not (paused):
        movement()
        health_display(pp1,pp2)

# Make sure yall have all the rotations of the plane downloaded on your computer
